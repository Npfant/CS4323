#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>
#include <sys/wait.h>
#include <semaphore.h>

#define NUM_TRAINS 4 //Trains

#define MAX_A 1
#define MAX_B 2
#define MAX_C 1 //Intersection max concurrent capacity
#define MAX_D 3
#define MAX_E 1

sem_t *sem_A, *sem_B, *sem_C, *sem_D, *sem_E; //Semaphore ID's

//function for each train to move through its intersections
void move_train(const char* train_name, const char* intersection){
    printf("%s is waiting at %s.\n", train_name, intersection); //pretend it works and this will be the output
    if(strcmp(intersection, "Intersection A") == 0){
        sem_wait(sem_A);
        printf("%s is passing through %s.\n", train_name, intersection);
        sleep(2); //time passing time will change, ask Group
        sem_post(sem_A);
    }
    else if(strcmp(intersection, "Intersection B") == 0){
        sem_wait(sem_B);
        printf("%s is passing through %s.\n", train_name, intersection);
        sleep(2);
        sem_post(sem_B);
    }
    else if(strcmp(intersection, "Intersection C") == 0){
        sem_wait(sem_C);
        printf("%s is passing through %s.\n", train_name, intersection);
        sleep(2);
        sem_post(sem_C);
    }
    else if(strcmp(intersection, "Intersection D") == 0){
        sem_wait(sem_D);
        printf("%s is passing through %s.\n", train_name, intersection);
        sleep(2);
        sem_post(sem_D);
    }
    else if(strcmp(intersection, "Intersection E") == 0){
        sem_wait(sem_E);
        printf("%s is passing through %s.\n", train_name, intersection);
        sleep(2);
        sem_post(sem_E);
    }
}

void train_behavior(const char* train_name){
    if(strcmp(train_name, "Train1") == 0){
        move_train(train_name, "Intersection A");
        move_train(train_name, "Intersection B");
        move_train(train_name, "Intersection C");
    }
    else if(strcmp(train_name, "Train2") == 0){
        move_train(train_name, "Intersection B");
        move_train(train_name, "Intersection D");
        move_train(train_name, "Intersection E");
    }
    else if(strcmp(train_name, "Train3") == 0){
        move_train(train_name, "Intersection C");
        move_train(train_name, "Intersection D");
        move_train(train_name, "Intersection A");
    }
    else if(strcmp(train_name, "Train4") == 0){
        move_train(train_name, "Intersection E");
        move_train(train_name, "Intersection B");
        move_train(train_name, "Intersection D");
    }
}

int main(){
    //We need semaphores

    //We need forks

    





}
