#include <stdio.h>  // for printf
#include <stdlib.h> // for exit(1)
#include <unistd.h> // for fork
#include <pthread.h> // for mutex

int main() {
  #define CHILDCOUNT 5
  
  char* train_name = "";
  
  int totalProcesses = 0;
  
  //pthread_mutex_t [lock];
  
  //sem_t lock[5]
  
  //parent reads train.txt for information 
  //initialization.c
  
  /*
  FILE *intersections_init = fopen("intersections.txt","r");
  FILE *trains_init = fopen("trains.txt","r");

  char intersections[5][100];
  char trains[5][100];

  for(int i = 0; i < 5; i++){
    fgets(intersections[i],100,intersections_init);
    fgets(trains[0],100,trains_init);
    //printf("%s\t\t%s",intersections[i],trains[i]);
  }
  */
  
  const char* childNames[CHILDCOUNT] = {"Train1", "Train2", "Train3", "Train4", "Train5"};
  
  for (int i = 0; i < CHILDCOUNT; i++){
    int trainPID = fork(); 
    totalProcesses ++;
    
    if (trainPID < 0) { // fork failed; exit
      fprintf(stderr, "fork failed\n");
      exit(1);
    } else if (trainPID == 0) { //child (new process)
      train_name = childNames[i];
      printf("TrainName: %s\n", train_name);

    } else { //parent goes down this path (main)
        //printf("Parent: %d PID = %d PPID = %d\n", trainPID, getpid(), getppid());
    }
  }
  
  printf("totalProcesses: %d", totalProcesses);

  return 0;
}
